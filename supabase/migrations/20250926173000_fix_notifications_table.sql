/*
# [Schema Creation] Create Notifications Table
This operation creates the `notifications` table to store user-specific alerts and messages.

## Query Description:
This script is safe to run. It creates a new table named `notifications` and will not affect any existing data. If the table already exists, the script will do nothing. It also sets up Row Level Security (RLS) to ensure users can only access their own notifications.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Low"
- Requires-Backup: false
- Reversible: true (the table can be dropped)

## Structure Details:
- Table: `public.notifications`
- Columns: `id`, `created_at`, `user_id`, `title`, `message`, `is_read`

## Security Implications:
- RLS Status: Enabled
- Policy Changes: Yes (Adds policies for SELECT, UPDATE, DELETE on the new table)
- Auth Requirements: Policies are based on `auth.uid()`

## Performance Impact:
- Indexes: Adds a primary key on `id` and an index on `user_id`.
- Triggers: None
- Estimated Impact: Low, as it's a new table.
*/

-- Create the notifications table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.notifications (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  is_read BOOLEAN DEFAULT false NOT NULL
);

-- Add index on user_id for faster lookups
CREATE INDEX IF NOT EXISTS notifications_user_id_idx ON public.notifications(user_id);

-- Add comments to the table and columns
COMMENT ON TABLE public.notifications IS 'Stores notifications for users.';
COMMENT ON COLUMN public.notifications.user_id IS 'The user who receives the notification.';
COMMENT ON COLUMN public.notifications.is_read IS 'Whether the user has read the notification.';

-- 1. Enable RLS on the notifications table
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- 2. Create policies for the notifications table

-- Allow users to view their own notifications
CREATE POLICY "Allow individual read access on notifications"
ON public.notifications FOR SELECT
USING (auth.uid() = user_id);

-- Allow users to mark their own notifications as read (update)
CREATE POLICY "Allow individual update access on notifications"
ON public.notifications FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Allow users to delete their own notifications
CREATE POLICY "Allow individual delete access on notifications"
ON public.notifications FOR DELETE
USING (auth.uid() = user_id);

-- Note: INSERT policy is omitted intentionally. Notifications should typically be created by system triggers or functions, not directly by users.
