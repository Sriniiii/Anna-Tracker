/*
          # Initial Schema for BiteWise

          This script sets up the foundational tables, roles, and security policies for the BiteWise application. It includes tables for user profiles, inventory, waste logs, and marketplace listings.

          ## Query Description: 
          This is a structural change that creates new tables and enables Row Level Security. It is safe to run on a new project but could be destructive if you have existing tables with the same names. No existing data will be modified as this schema is new.

          ## Metadata:
          - Schema-Category: "Structural"
          - Impact-Level: "High"
          - Requires-Backup: false
          - Reversible: false

          ## Structure Details:
          - **Enums**: `user_role`
          - **Tables**: `profiles`, `inventory_items`, `waste_logs`, `marketplace_listings`
          - **Functions**: `handle_new_user`, `get_user_role`
          - **Triggers**: `on_auth_user_created`
          - **RLS Policies**: Enabled on all new tables to restrict access based on user roles.

          ## Security Implications:
          - RLS Status: Enabled
          - Policy Changes: Yes, new policies are created.
          - Auth Requirements: Policies rely on `auth.uid()` to identify the current user.

          ## Performance Impact:
          - Indexes: Primary keys and foreign keys are indexed by default.
          - Triggers: A trigger is added to the `auth.users` table, which runs on new user creation.
          - Estimated Impact: Low, as operations are simple and indexed.
          */

-- 1. Create a type for user roles
CREATE TYPE public.user_role AS ENUM ('user', 'admin');

-- 2. Create a table for public user profiles
CREATE TABLE public.profiles (
  id UUID REFERENCES auth.users NOT NULL PRIMARY KEY,
  updated_at TIMESTAMPTZ,
  email VARCHAR(255) UNIQUE,
  role public.user_role NOT NULL DEFAULT 'user'
);

COMMENT ON TABLE public.profiles IS 'Public user profiles, extending auth.users.';

-- 3. Set up Row Level Security (RLS) for the profiles table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public profiles are viewable by everyone."
  ON public.profiles FOR SELECT
  USING ( true );

CREATE POLICY "Users can insert their own profile."
  ON public.profiles FOR INSERT
  WITH CHECK ( auth.uid() = id );

CREATE POLICY "Users can update their own profile."
  ON public.profiles FOR UPDATE
  USING ( auth.uid() = id );

-- 4. Create a function to automatically create a profile for new users
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email)
  VALUES (new.id, new.email);
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 5. Create a trigger to call the function when a new user signs up
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 6. Create Inventory Items table
CREATE TABLE public.inventory_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users NOT NULL,
  name TEXT NOT NULL,
  category TEXT,
  quantity NUMERIC,
  unit TEXT,
  expiration_date DATE,
  purchase_price NUMERIC,
  location TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE public.inventory_items IS 'Tracks individual food items in a user''s inventory.';

-- 7. Set up RLS for inventory_items
ALTER TABLE public.inventory_items ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage their own inventory."
  ON public.inventory_items FOR ALL
  USING ( auth.uid() = user_id );

CREATE POLICY "Admins can manage all inventory."
  ON public.inventory_items FOR ALL
  USING ( (SELECT get_user_role(auth.uid())) = 'admin' );

-- 8. Create Waste Logs table
CREATE TABLE public.waste_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users NOT NULL,
  item_name TEXT NOT NULL,
  category TEXT,
  quantity NUMERIC,
  unit TEXT,
  reason TEXT,
  date DATE,
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE public.waste_logs IS 'Records instances of food waste.';

-- 9. Set up RLS for waste_logs
ALTER TABLE public.waste_logs ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage their own waste logs."
  ON public.waste_logs FOR ALL
  USING ( auth.uid() = user_id );

CREATE POLICY "Admins can manage all waste logs."
  ON public.waste_logs FOR ALL
  USING ( (SELECT get_user_role(auth.uid())) = 'admin' );

-- 10. Create Marketplace Listings table
CREATE TABLE public.marketplace_listings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  original_price NUMERIC,
  discounted_price NUMERIC,
  quantity TEXT,
  category TEXT,
  image_url TEXT,
  expires_at TIMESTAMPTZ,
  location TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE public.marketplace_listings IS 'Listings of surplus food available for sale.';

-- 11. Set up RLS for marketplace_listings
ALTER TABLE public.marketplace_listings ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Listings are viewable by everyone."
  ON public.marketplace_listings FOR SELECT
  USING ( true );

CREATE POLICY "Users can manage their own listings."
  ON public.marketplace_listings FOR INSERT, UPDATE, DELETE
  USING ( auth.uid() = user_id );

CREATE POLICY "Admins can manage all listings."
  ON public.marketplace_listings FOR ALL
  USING ( (SELECT get_user_role(auth.uid())) = 'admin' );

-- 12. Create a helper function to get a user's role
CREATE OR REPLACE FUNCTION public.get_user_role(user_id UUID)
RETURNS public.user_role AS $$
DECLARE
  user_role public.user_role;
BEGIN
  SELECT role INTO user_role FROM public.profiles WHERE id = user_id;
  RETURN user_role;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

/*
## HOW TO CREATE AN ADMIN USER:

1. Sign up for a new account in the BiteWise application.
2. Go to your Supabase project dashboard.
3. Navigate to the `Table Editor` and select the `profiles` table.
4. Find the row corresponding to your new user.
5. Change the value in the `role` column from `user` to `admin`.
6. Save the changes. Your user now has admin privileges.
*/
